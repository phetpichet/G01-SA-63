// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Piichet-3-/app/ent/dispense"
	"github.com/Piichet-3-/app/ent/drug"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Dispense is the model entity for the Dispense schema.
type Dispense struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DispenseQuery when eager-loading is set.
	Edges   DispenseEdges `json:"edges"`
	drug_id *int
}

// DispenseEdges holds the relations/edges for other nodes in the graph.
type DispenseEdges struct {
	// Drug holds the value of the drug edge.
	Drug *Drug
	// Users holds the value of the users edge.
	Users []*User
	// Drugs holds the value of the drugs edge.
	Drugs []*Drug
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DrugOrErr returns the Drug value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DispenseEdges) DrugOrErr() (*Drug, error) {
	if e.loadedTypes[0] {
		if e.Drug == nil {
			// The edge drug was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: drug.Label}
		}
		return e.Drug, nil
	}
	return nil, &NotLoadedError{edge: "drug"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e DispenseEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// DrugsOrErr returns the Drugs value or an error if the edge
// was not loaded in eager-loading.
func (e DispenseEdges) DrugsOrErr() ([]*Drug, error) {
	if e.loadedTypes[2] {
		return e.Drugs, nil
	}
	return nil, &NotLoadedError{edge: "drugs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dispense) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // note
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Dispense) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // drug_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dispense fields.
func (d *Dispense) assignValues(values ...interface{}) error {
	if m, n := len(values), len(dispense.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field note", values[0])
	} else if value.Valid {
		d.Note = value.String
	}
	values = values[1:]
	if len(values) == len(dispense.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field drug_id", value)
		} else if value.Valid {
			d.drug_id = new(int)
			*d.drug_id = int(value.Int64)
		}
	}
	return nil
}

// QueryDrug queries the drug edge of the Dispense.
func (d *Dispense) QueryDrug() *DrugQuery {
	return (&DispenseClient{config: d.config}).QueryDrug(d)
}

// QueryUsers queries the users edge of the Dispense.
func (d *Dispense) QueryUsers() *UserQuery {
	return (&DispenseClient{config: d.config}).QueryUsers(d)
}

// QueryDrugs queries the drugs edge of the Dispense.
func (d *Dispense) QueryDrugs() *DrugQuery {
	return (&DispenseClient{config: d.config}).QueryDrugs(d)
}

// Update returns a builder for updating this Dispense.
// Note that, you need to call Dispense.Unwrap() before calling this method, if this Dispense
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dispense) Update() *DispenseUpdateOne {
	return (&DispenseClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Dispense) Unwrap() *Dispense {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dispense is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dispense) String() string {
	var builder strings.Builder
	builder.WriteString("Dispense(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", note=")
	builder.WriteString(d.Note)
	builder.WriteByte(')')
	return builder.String()
}

// Dispenses is a parsable slice of Dispense.
type Dispenses []*Dispense

func (d Dispenses) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
