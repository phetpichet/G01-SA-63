// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Piichet-3-/app/ent/drug"
	"github.com/Piichet-3-/app/ent/form"
	"github.com/Piichet-3-/app/ent/unit"
	"github.com/Piichet-3-/app/ent/volume"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Drug is the model entity for the Drug schema.
type Drug struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DrugType holds the value of the "DrugType" field.
	DrugType string `json:"DrugType,omitempty"`
	// Strength holds the value of the "Strength" field.
	Strength string `json:"Strength,omitempty"`
	// Information holds the value of the "Information" field.
	Information string `json:"Information,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DrugQuery when eager-loading is set.
	Edges       DrugEdges `json:"edges"`
	dispense_id *int
	form_id     *int
	unit_id     *int
	volume_id   *int
}

// DrugEdges holds the relations/edges for other nodes in the graph.
type DrugEdges struct {
	// Form holds the value of the form edge.
	Form *Form
	// Unit holds the value of the unit edge.
	Unit *Unit
	// Volume holds the value of the volume edge.
	Volume *Volume
	// Users holds the value of the users edge.
	Users []*User
	// Dispenses holds the value of the dispenses edge.
	Dispenses []*Dispense
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// FormOrErr returns the Form value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DrugEdges) FormOrErr() (*Form, error) {
	if e.loadedTypes[0] {
		if e.Form == nil {
			// The edge form was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: form.Label}
		}
		return e.Form, nil
	}
	return nil, &NotLoadedError{edge: "form"}
}

// UnitOrErr returns the Unit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DrugEdges) UnitOrErr() (*Unit, error) {
	if e.loadedTypes[1] {
		if e.Unit == nil {
			// The edge unit was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: unit.Label}
		}
		return e.Unit, nil
	}
	return nil, &NotLoadedError{edge: "unit"}
}

// VolumeOrErr returns the Volume value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DrugEdges) VolumeOrErr() (*Volume, error) {
	if e.loadedTypes[2] {
		if e.Volume == nil {
			// The edge volume was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: volume.Label}
		}
		return e.Volume, nil
	}
	return nil, &NotLoadedError{edge: "volume"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e DrugEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[3] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// DispensesOrErr returns the Dispenses value or an error if the edge
// was not loaded in eager-loading.
func (e DrugEdges) DispensesOrErr() ([]*Dispense, error) {
	if e.loadedTypes[4] {
		return e.Dispenses, nil
	}
	return nil, &NotLoadedError{edge: "dispenses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Drug) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // DrugType
		&sql.NullString{}, // Strength
		&sql.NullString{}, // Information
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Drug) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // dispense_id
		&sql.NullInt64{}, // form_id
		&sql.NullInt64{}, // unit_id
		&sql.NullInt64{}, // volume_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Drug fields.
func (d *Drug) assignValues(values ...interface{}) error {
	if m, n := len(values), len(drug.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field DrugType", values[0])
	} else if value.Valid {
		d.DrugType = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Strength", values[1])
	} else if value.Valid {
		d.Strength = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Information", values[2])
	} else if value.Valid {
		d.Information = value.String
	}
	values = values[3:]
	if len(values) == len(drug.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field dispense_id", value)
		} else if value.Valid {
			d.dispense_id = new(int)
			*d.dispense_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field form_id", value)
		} else if value.Valid {
			d.form_id = new(int)
			*d.form_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field unit_id", value)
		} else if value.Valid {
			d.unit_id = new(int)
			*d.unit_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field volume_id", value)
		} else if value.Valid {
			d.volume_id = new(int)
			*d.volume_id = int(value.Int64)
		}
	}
	return nil
}

// QueryForm queries the form edge of the Drug.
func (d *Drug) QueryForm() *FormQuery {
	return (&DrugClient{config: d.config}).QueryForm(d)
}

// QueryUnit queries the unit edge of the Drug.
func (d *Drug) QueryUnit() *UnitQuery {
	return (&DrugClient{config: d.config}).QueryUnit(d)
}

// QueryVolume queries the volume edge of the Drug.
func (d *Drug) QueryVolume() *VolumeQuery {
	return (&DrugClient{config: d.config}).QueryVolume(d)
}

// QueryUsers queries the users edge of the Drug.
func (d *Drug) QueryUsers() *UserQuery {
	return (&DrugClient{config: d.config}).QueryUsers(d)
}

// QueryDispenses queries the dispenses edge of the Drug.
func (d *Drug) QueryDispenses() *DispenseQuery {
	return (&DrugClient{config: d.config}).QueryDispenses(d)
}

// Update returns a builder for updating this Drug.
// Note that, you need to call Drug.Unwrap() before calling this method, if this Drug
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Drug) Update() *DrugUpdateOne {
	return (&DrugClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Drug) Unwrap() *Drug {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Drug is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Drug) String() string {
	var builder strings.Builder
	builder.WriteString("Drug(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", DrugType=")
	builder.WriteString(d.DrugType)
	builder.WriteString(", Strength=")
	builder.WriteString(d.Strength)
	builder.WriteString(", Information=")
	builder.WriteString(d.Information)
	builder.WriteByte(')')
	return builder.String()
}

// Drugs is a parsable slice of Drug.
type Drugs []*Drug

func (d Drugs) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
