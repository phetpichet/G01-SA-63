// Code generated by entc, DO NOT EDIT.

package drug

import (
	"github.com/Piichet-3-/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DrugType applies equality check predicate on the "DrugType" field. It's identical to DrugTypeEQ.
func DrugType(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDrugType), v))
	})
}

// Strength applies equality check predicate on the "Strength" field. It's identical to StrengthEQ.
func Strength(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStrength), v))
	})
}

// Information applies equality check predicate on the "Information" field. It's identical to InformationEQ.
func Information(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInformation), v))
	})
}

// DrugTypeEQ applies the EQ predicate on the "DrugType" field.
func DrugTypeEQ(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDrugType), v))
	})
}

// DrugTypeNEQ applies the NEQ predicate on the "DrugType" field.
func DrugTypeNEQ(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDrugType), v))
	})
}

// DrugTypeIn applies the In predicate on the "DrugType" field.
func DrugTypeIn(vs ...string) predicate.Drug {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDrugType), v...))
	})
}

// DrugTypeNotIn applies the NotIn predicate on the "DrugType" field.
func DrugTypeNotIn(vs ...string) predicate.Drug {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDrugType), v...))
	})
}

// DrugTypeGT applies the GT predicate on the "DrugType" field.
func DrugTypeGT(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDrugType), v))
	})
}

// DrugTypeGTE applies the GTE predicate on the "DrugType" field.
func DrugTypeGTE(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDrugType), v))
	})
}

// DrugTypeLT applies the LT predicate on the "DrugType" field.
func DrugTypeLT(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDrugType), v))
	})
}

// DrugTypeLTE applies the LTE predicate on the "DrugType" field.
func DrugTypeLTE(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDrugType), v))
	})
}

// DrugTypeContains applies the Contains predicate on the "DrugType" field.
func DrugTypeContains(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDrugType), v))
	})
}

// DrugTypeHasPrefix applies the HasPrefix predicate on the "DrugType" field.
func DrugTypeHasPrefix(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDrugType), v))
	})
}

// DrugTypeHasSuffix applies the HasSuffix predicate on the "DrugType" field.
func DrugTypeHasSuffix(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDrugType), v))
	})
}

// DrugTypeEqualFold applies the EqualFold predicate on the "DrugType" field.
func DrugTypeEqualFold(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDrugType), v))
	})
}

// DrugTypeContainsFold applies the ContainsFold predicate on the "DrugType" field.
func DrugTypeContainsFold(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDrugType), v))
	})
}

// StrengthEQ applies the EQ predicate on the "Strength" field.
func StrengthEQ(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStrength), v))
	})
}

// StrengthNEQ applies the NEQ predicate on the "Strength" field.
func StrengthNEQ(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStrength), v))
	})
}

// StrengthIn applies the In predicate on the "Strength" field.
func StrengthIn(vs ...string) predicate.Drug {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStrength), v...))
	})
}

// StrengthNotIn applies the NotIn predicate on the "Strength" field.
func StrengthNotIn(vs ...string) predicate.Drug {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStrength), v...))
	})
}

// StrengthGT applies the GT predicate on the "Strength" field.
func StrengthGT(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStrength), v))
	})
}

// StrengthGTE applies the GTE predicate on the "Strength" field.
func StrengthGTE(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStrength), v))
	})
}

// StrengthLT applies the LT predicate on the "Strength" field.
func StrengthLT(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStrength), v))
	})
}

// StrengthLTE applies the LTE predicate on the "Strength" field.
func StrengthLTE(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStrength), v))
	})
}

// StrengthContains applies the Contains predicate on the "Strength" field.
func StrengthContains(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStrength), v))
	})
}

// StrengthHasPrefix applies the HasPrefix predicate on the "Strength" field.
func StrengthHasPrefix(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStrength), v))
	})
}

// StrengthHasSuffix applies the HasSuffix predicate on the "Strength" field.
func StrengthHasSuffix(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStrength), v))
	})
}

// StrengthEqualFold applies the EqualFold predicate on the "Strength" field.
func StrengthEqualFold(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStrength), v))
	})
}

// StrengthContainsFold applies the ContainsFold predicate on the "Strength" field.
func StrengthContainsFold(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStrength), v))
	})
}

// InformationEQ applies the EQ predicate on the "Information" field.
func InformationEQ(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInformation), v))
	})
}

// InformationNEQ applies the NEQ predicate on the "Information" field.
func InformationNEQ(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInformation), v))
	})
}

// InformationIn applies the In predicate on the "Information" field.
func InformationIn(vs ...string) predicate.Drug {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInformation), v...))
	})
}

// InformationNotIn applies the NotIn predicate on the "Information" field.
func InformationNotIn(vs ...string) predicate.Drug {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drug(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInformation), v...))
	})
}

// InformationGT applies the GT predicate on the "Information" field.
func InformationGT(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInformation), v))
	})
}

// InformationGTE applies the GTE predicate on the "Information" field.
func InformationGTE(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInformation), v))
	})
}

// InformationLT applies the LT predicate on the "Information" field.
func InformationLT(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInformation), v))
	})
}

// InformationLTE applies the LTE predicate on the "Information" field.
func InformationLTE(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInformation), v))
	})
}

// InformationContains applies the Contains predicate on the "Information" field.
func InformationContains(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInformation), v))
	})
}

// InformationHasPrefix applies the HasPrefix predicate on the "Information" field.
func InformationHasPrefix(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInformation), v))
	})
}

// InformationHasSuffix applies the HasSuffix predicate on the "Information" field.
func InformationHasSuffix(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInformation), v))
	})
}

// InformationEqualFold applies the EqualFold predicate on the "Information" field.
func InformationEqualFold(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInformation), v))
	})
}

// InformationContainsFold applies the ContainsFold predicate on the "Information" field.
func InformationContainsFold(v string) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInformation), v))
	})
}

// HasForm applies the HasEdge predicate on the "form" edge.
func HasForm() predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FormTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FormTable, FormColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFormWith applies the HasEdge predicate on the "form" edge with a given conditions (other predicates).
func HasFormWith(preds ...predicate.Form) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FormInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FormTable, FormColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUnit applies the HasEdge predicate on the "unit" edge.
func HasUnit() predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UnitTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UnitTable, UnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUnitWith applies the HasEdge predicate on the "unit" edge with a given conditions (other predicates).
func HasUnitWith(preds ...predicate.Unit) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UnitInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UnitTable, UnitColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVolume applies the HasEdge predicate on the "volume" edge.
func HasVolume() predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VolumeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VolumeTable, VolumeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVolumeWith applies the HasEdge predicate on the "volume" edge with a given conditions (other predicates).
func HasVolumeWith(preds ...predicate.Volume) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VolumeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VolumeTable, VolumeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDispenses applies the HasEdge predicate on the "dispenses" edge.
func HasDispenses() predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DispensesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DispensesTable, DispensesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDispensesWith applies the HasEdge predicate on the "dispenses" edge with a given conditions (other predicates).
func HasDispensesWith(preds ...predicate.Dispense) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DispensesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DispensesTable, DispensesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Drug) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Drug) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Drug) predicate.Drug {
	return predicate.Drug(func(s *sql.Selector) {
		p(s.Not())
	})
}
