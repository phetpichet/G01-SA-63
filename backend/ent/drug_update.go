// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/Piichet-3-/app/ent/dispense"
	"github.com/Piichet-3-/app/ent/drug"
	"github.com/Piichet-3-/app/ent/form"
	"github.com/Piichet-3-/app/ent/predicate"
	"github.com/Piichet-3-/app/ent/unit"
	"github.com/Piichet-3-/app/ent/user"
	"github.com/Piichet-3-/app/ent/volume"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// DrugUpdate is the builder for updating Drug entities.
type DrugUpdate struct {
	config
	hooks      []Hook
	mutation   *DrugMutation
	predicates []predicate.Drug
}

// Where adds a new predicate for the builder.
func (du *DrugUpdate) Where(ps ...predicate.Drug) *DrugUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetDrugType sets the DrugType field.
func (du *DrugUpdate) SetDrugType(s string) *DrugUpdate {
	du.mutation.SetDrugType(s)
	return du
}

// SetStrength sets the Strength field.
func (du *DrugUpdate) SetStrength(s string) *DrugUpdate {
	du.mutation.SetStrength(s)
	return du
}

// SetNillableStrength sets the Strength field if the given value is not nil.
func (du *DrugUpdate) SetNillableStrength(s *string) *DrugUpdate {
	if s != nil {
		du.SetStrength(*s)
	}
	return du
}

// SetInformation sets the Information field.
func (du *DrugUpdate) SetInformation(s string) *DrugUpdate {
	du.mutation.SetInformation(s)
	return du
}

// SetNillableInformation sets the Information field if the given value is not nil.
func (du *DrugUpdate) SetNillableInformation(s *string) *DrugUpdate {
	if s != nil {
		du.SetInformation(*s)
	}
	return du
}

// SetFormID sets the form edge to Form by id.
func (du *DrugUpdate) SetFormID(id int) *DrugUpdate {
	du.mutation.SetFormID(id)
	return du
}

// SetNillableFormID sets the form edge to Form by id if the given value is not nil.
func (du *DrugUpdate) SetNillableFormID(id *int) *DrugUpdate {
	if id != nil {
		du = du.SetFormID(*id)
	}
	return du
}

// SetForm sets the form edge to Form.
func (du *DrugUpdate) SetForm(f *Form) *DrugUpdate {
	return du.SetFormID(f.ID)
}

// SetUnitID sets the unit edge to Unit by id.
func (du *DrugUpdate) SetUnitID(id int) *DrugUpdate {
	du.mutation.SetUnitID(id)
	return du
}

// SetNillableUnitID sets the unit edge to Unit by id if the given value is not nil.
func (du *DrugUpdate) SetNillableUnitID(id *int) *DrugUpdate {
	if id != nil {
		du = du.SetUnitID(*id)
	}
	return du
}

// SetUnit sets the unit edge to Unit.
func (du *DrugUpdate) SetUnit(u *Unit) *DrugUpdate {
	return du.SetUnitID(u.ID)
}

// SetVolumeID sets the volume edge to Volume by id.
func (du *DrugUpdate) SetVolumeID(id int) *DrugUpdate {
	du.mutation.SetVolumeID(id)
	return du
}

// SetNillableVolumeID sets the volume edge to Volume by id if the given value is not nil.
func (du *DrugUpdate) SetNillableVolumeID(id *int) *DrugUpdate {
	if id != nil {
		du = du.SetVolumeID(*id)
	}
	return du
}

// SetVolume sets the volume edge to Volume.
func (du *DrugUpdate) SetVolume(v *Volume) *DrugUpdate {
	return du.SetVolumeID(v.ID)
}

// AddUserIDs adds the users edge to User by ids.
func (du *DrugUpdate) AddUserIDs(ids ...int) *DrugUpdate {
	du.mutation.AddUserIDs(ids...)
	return du
}

// AddUsers adds the users edges to User.
func (du *DrugUpdate) AddUsers(u ...*User) *DrugUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.AddUserIDs(ids...)
}

// AddDispenseIDs adds the dispenses edge to Dispense by ids.
func (du *DrugUpdate) AddDispenseIDs(ids ...int) *DrugUpdate {
	du.mutation.AddDispenseIDs(ids...)
	return du
}

// AddDispenses adds the dispenses edges to Dispense.
func (du *DrugUpdate) AddDispenses(d ...*Dispense) *DrugUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddDispenseIDs(ids...)
}

// Mutation returns the DrugMutation object of the builder.
func (du *DrugUpdate) Mutation() *DrugMutation {
	return du.mutation
}

// ClearForm clears the form edge to Form.
func (du *DrugUpdate) ClearForm() *DrugUpdate {
	du.mutation.ClearForm()
	return du
}

// ClearUnit clears the unit edge to Unit.
func (du *DrugUpdate) ClearUnit() *DrugUpdate {
	du.mutation.ClearUnit()
	return du
}

// ClearVolume clears the volume edge to Volume.
func (du *DrugUpdate) ClearVolume() *DrugUpdate {
	du.mutation.ClearVolume()
	return du
}

// RemoveUserIDs removes the users edge to User by ids.
func (du *DrugUpdate) RemoveUserIDs(ids ...int) *DrugUpdate {
	du.mutation.RemoveUserIDs(ids...)
	return du
}

// RemoveUsers removes users edges to User.
func (du *DrugUpdate) RemoveUsers(u ...*User) *DrugUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.RemoveUserIDs(ids...)
}

// RemoveDispenseIDs removes the dispenses edge to Dispense by ids.
func (du *DrugUpdate) RemoveDispenseIDs(ids ...int) *DrugUpdate {
	du.mutation.RemoveDispenseIDs(ids...)
	return du
}

// RemoveDispenses removes dispenses edges to Dispense.
func (du *DrugUpdate) RemoveDispenses(d ...*Dispense) *DrugUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveDispenseIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DrugUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := du.mutation.DrugType(); ok {
		if err := drug.DrugTypeValidator(v); err != nil {
			return 0, &ValidationError{Name: "DrugType", err: fmt.Errorf("ent: validator failed for field \"DrugType\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DrugMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DrugUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DrugUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DrugUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DrugUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   drug.Table,
			Columns: drug.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: drug.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.DrugType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drug.FieldDrugType,
		})
	}
	if value, ok := du.mutation.Strength(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drug.FieldStrength,
		})
	}
	if value, ok := du.mutation.Information(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drug.FieldInformation,
		})
	}
	if du.mutation.FormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.FormTable,
			Columns: []string{drug.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: form.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.FormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.FormTable,
			Columns: []string{drug.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: form.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.UnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.UnitTable,
			Columns: []string{drug.UnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.UnitTable,
			Columns: []string{drug.UnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.VolumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.VolumeTable,
			Columns: []string{drug.VolumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: volume.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.VolumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.VolumeTable,
			Columns: []string{drug.VolumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: volume.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := du.mutation.RemovedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   drug.UsersTable,
			Columns: []string{drug.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   drug.UsersTable,
			Columns: []string{drug.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := du.mutation.RemovedDispensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   drug.DispensesTable,
			Columns: []string{drug.DispensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dispense.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DispensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   drug.DispensesTable,
			Columns: []string{drug.DispensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dispense.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drug.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DrugUpdateOne is the builder for updating a single Drug entity.
type DrugUpdateOne struct {
	config
	hooks    []Hook
	mutation *DrugMutation
}

// SetDrugType sets the DrugType field.
func (duo *DrugUpdateOne) SetDrugType(s string) *DrugUpdateOne {
	duo.mutation.SetDrugType(s)
	return duo
}

// SetStrength sets the Strength field.
func (duo *DrugUpdateOne) SetStrength(s string) *DrugUpdateOne {
	duo.mutation.SetStrength(s)
	return duo
}

// SetNillableStrength sets the Strength field if the given value is not nil.
func (duo *DrugUpdateOne) SetNillableStrength(s *string) *DrugUpdateOne {
	if s != nil {
		duo.SetStrength(*s)
	}
	return duo
}

// SetInformation sets the Information field.
func (duo *DrugUpdateOne) SetInformation(s string) *DrugUpdateOne {
	duo.mutation.SetInformation(s)
	return duo
}

// SetNillableInformation sets the Information field if the given value is not nil.
func (duo *DrugUpdateOne) SetNillableInformation(s *string) *DrugUpdateOne {
	if s != nil {
		duo.SetInformation(*s)
	}
	return duo
}

// SetFormID sets the form edge to Form by id.
func (duo *DrugUpdateOne) SetFormID(id int) *DrugUpdateOne {
	duo.mutation.SetFormID(id)
	return duo
}

// SetNillableFormID sets the form edge to Form by id if the given value is not nil.
func (duo *DrugUpdateOne) SetNillableFormID(id *int) *DrugUpdateOne {
	if id != nil {
		duo = duo.SetFormID(*id)
	}
	return duo
}

// SetForm sets the form edge to Form.
func (duo *DrugUpdateOne) SetForm(f *Form) *DrugUpdateOne {
	return duo.SetFormID(f.ID)
}

// SetUnitID sets the unit edge to Unit by id.
func (duo *DrugUpdateOne) SetUnitID(id int) *DrugUpdateOne {
	duo.mutation.SetUnitID(id)
	return duo
}

// SetNillableUnitID sets the unit edge to Unit by id if the given value is not nil.
func (duo *DrugUpdateOne) SetNillableUnitID(id *int) *DrugUpdateOne {
	if id != nil {
		duo = duo.SetUnitID(*id)
	}
	return duo
}

// SetUnit sets the unit edge to Unit.
func (duo *DrugUpdateOne) SetUnit(u *Unit) *DrugUpdateOne {
	return duo.SetUnitID(u.ID)
}

// SetVolumeID sets the volume edge to Volume by id.
func (duo *DrugUpdateOne) SetVolumeID(id int) *DrugUpdateOne {
	duo.mutation.SetVolumeID(id)
	return duo
}

// SetNillableVolumeID sets the volume edge to Volume by id if the given value is not nil.
func (duo *DrugUpdateOne) SetNillableVolumeID(id *int) *DrugUpdateOne {
	if id != nil {
		duo = duo.SetVolumeID(*id)
	}
	return duo
}

// SetVolume sets the volume edge to Volume.
func (duo *DrugUpdateOne) SetVolume(v *Volume) *DrugUpdateOne {
	return duo.SetVolumeID(v.ID)
}

// AddUserIDs adds the users edge to User by ids.
func (duo *DrugUpdateOne) AddUserIDs(ids ...int) *DrugUpdateOne {
	duo.mutation.AddUserIDs(ids...)
	return duo
}

// AddUsers adds the users edges to User.
func (duo *DrugUpdateOne) AddUsers(u ...*User) *DrugUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.AddUserIDs(ids...)
}

// AddDispenseIDs adds the dispenses edge to Dispense by ids.
func (duo *DrugUpdateOne) AddDispenseIDs(ids ...int) *DrugUpdateOne {
	duo.mutation.AddDispenseIDs(ids...)
	return duo
}

// AddDispenses adds the dispenses edges to Dispense.
func (duo *DrugUpdateOne) AddDispenses(d ...*Dispense) *DrugUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddDispenseIDs(ids...)
}

// Mutation returns the DrugMutation object of the builder.
func (duo *DrugUpdateOne) Mutation() *DrugMutation {
	return duo.mutation
}

// ClearForm clears the form edge to Form.
func (duo *DrugUpdateOne) ClearForm() *DrugUpdateOne {
	duo.mutation.ClearForm()
	return duo
}

// ClearUnit clears the unit edge to Unit.
func (duo *DrugUpdateOne) ClearUnit() *DrugUpdateOne {
	duo.mutation.ClearUnit()
	return duo
}

// ClearVolume clears the volume edge to Volume.
func (duo *DrugUpdateOne) ClearVolume() *DrugUpdateOne {
	duo.mutation.ClearVolume()
	return duo
}

// RemoveUserIDs removes the users edge to User by ids.
func (duo *DrugUpdateOne) RemoveUserIDs(ids ...int) *DrugUpdateOne {
	duo.mutation.RemoveUserIDs(ids...)
	return duo
}

// RemoveUsers removes users edges to User.
func (duo *DrugUpdateOne) RemoveUsers(u ...*User) *DrugUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.RemoveUserIDs(ids...)
}

// RemoveDispenseIDs removes the dispenses edge to Dispense by ids.
func (duo *DrugUpdateOne) RemoveDispenseIDs(ids ...int) *DrugUpdateOne {
	duo.mutation.RemoveDispenseIDs(ids...)
	return duo
}

// RemoveDispenses removes dispenses edges to Dispense.
func (duo *DrugUpdateOne) RemoveDispenses(d ...*Dispense) *DrugUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveDispenseIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (duo *DrugUpdateOne) Save(ctx context.Context) (*Drug, error) {
	if v, ok := duo.mutation.DrugType(); ok {
		if err := drug.DrugTypeValidator(v); err != nil {
			return nil, &ValidationError{Name: "DrugType", err: fmt.Errorf("ent: validator failed for field \"DrugType\": %w", err)}
		}
	}

	var (
		err  error
		node *Drug
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DrugMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DrugUpdateOne) SaveX(ctx context.Context) *Drug {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DrugUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DrugUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DrugUpdateOne) sqlSave(ctx context.Context) (d *Drug, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   drug.Table,
			Columns: drug.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: drug.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Drug.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.DrugType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drug.FieldDrugType,
		})
	}
	if value, ok := duo.mutation.Strength(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drug.FieldStrength,
		})
	}
	if value, ok := duo.mutation.Information(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drug.FieldInformation,
		})
	}
	if duo.mutation.FormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.FormTable,
			Columns: []string{drug.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: form.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.FormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.FormTable,
			Columns: []string{drug.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: form.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.UnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.UnitTable,
			Columns: []string{drug.UnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.UnitTable,
			Columns: []string{drug.UnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.VolumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.VolumeTable,
			Columns: []string{drug.VolumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: volume.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.VolumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.VolumeTable,
			Columns: []string{drug.VolumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: volume.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := duo.mutation.RemovedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   drug.UsersTable,
			Columns: []string{drug.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   drug.UsersTable,
			Columns: []string{drug.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := duo.mutation.RemovedDispensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   drug.DispensesTable,
			Columns: []string{drug.DispensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dispense.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DispensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   drug.DispensesTable,
			Columns: []string{drug.DispensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dispense.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	d = &Drug{config: duo.config}
	_spec.Assign = d.assignValues
	_spec.ScanValues = d.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drug.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
