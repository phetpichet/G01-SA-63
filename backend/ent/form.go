// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Piichet-3-/app/ent/form"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Form is the model entity for the Form schema.
type Form struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FormType holds the value of the "FormType" field.
	FormType string `json:"FormType,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FormQuery when eager-loading is set.
	Edges FormEdges `json:"edges"`
}

// FormEdges holds the relations/edges for other nodes in the graph.
type FormEdges struct {
	// Drugs holds the value of the drugs edge.
	Drugs []*Drug
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DrugsOrErr returns the Drugs value or an error if the edge
// was not loaded in eager-loading.
func (e FormEdges) DrugsOrErr() ([]*Drug, error) {
	if e.loadedTypes[0] {
		return e.Drugs, nil
	}
	return nil, &NotLoadedError{edge: "drugs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Form) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // FormType
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Form fields.
func (f *Form) assignValues(values ...interface{}) error {
	if m, n := len(values), len(form.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	f.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field FormType", values[0])
	} else if value.Valid {
		f.FormType = value.String
	}
	return nil
}

// QueryDrugs queries the drugs edge of the Form.
func (f *Form) QueryDrugs() *DrugQuery {
	return (&FormClient{config: f.config}).QueryDrugs(f)
}

// Update returns a builder for updating this Form.
// Note that, you need to call Form.Unwrap() before calling this method, if this Form
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Form) Update() *FormUpdateOne {
	return (&FormClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (f *Form) Unwrap() *Form {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Form is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Form) String() string {
	var builder strings.Builder
	builder.WriteString("Form(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", FormType=")
	builder.WriteString(f.FormType)
	builder.WriteByte(')')
	return builder.String()
}

// Forms is a parsable slice of Form.
type Forms []*Form

func (f Forms) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
