// Code generated by entc, DO NOT EDIT.

package unit

import (
	"github.com/Piichet-3-/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UnitType applies equality check predicate on the "UnitType" field. It's identical to UnitTypeEQ.
func UnitType(v string) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitType), v))
	})
}

// UnitTypeEQ applies the EQ predicate on the "UnitType" field.
func UnitTypeEQ(v string) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitType), v))
	})
}

// UnitTypeNEQ applies the NEQ predicate on the "UnitType" field.
func UnitTypeNEQ(v string) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitType), v))
	})
}

// UnitTypeIn applies the In predicate on the "UnitType" field.
func UnitTypeIn(vs ...string) predicate.Unit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitType), v...))
	})
}

// UnitTypeNotIn applies the NotIn predicate on the "UnitType" field.
func UnitTypeNotIn(vs ...string) predicate.Unit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitType), v...))
	})
}

// UnitTypeGT applies the GT predicate on the "UnitType" field.
func UnitTypeGT(v string) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitType), v))
	})
}

// UnitTypeGTE applies the GTE predicate on the "UnitType" field.
func UnitTypeGTE(v string) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitType), v))
	})
}

// UnitTypeLT applies the LT predicate on the "UnitType" field.
func UnitTypeLT(v string) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitType), v))
	})
}

// UnitTypeLTE applies the LTE predicate on the "UnitType" field.
func UnitTypeLTE(v string) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitType), v))
	})
}

// UnitTypeContains applies the Contains predicate on the "UnitType" field.
func UnitTypeContains(v string) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnitType), v))
	})
}

// UnitTypeHasPrefix applies the HasPrefix predicate on the "UnitType" field.
func UnitTypeHasPrefix(v string) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnitType), v))
	})
}

// UnitTypeHasSuffix applies the HasSuffix predicate on the "UnitType" field.
func UnitTypeHasSuffix(v string) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnitType), v))
	})
}

// UnitTypeEqualFold applies the EqualFold predicate on the "UnitType" field.
func UnitTypeEqualFold(v string) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnitType), v))
	})
}

// UnitTypeContainsFold applies the ContainsFold predicate on the "UnitType" field.
func UnitTypeContainsFold(v string) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnitType), v))
	})
}

// HasDrugs applies the HasEdge predicate on the "drugs" edge.
func HasDrugs() predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DrugsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DrugsTable, DrugsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDrugsWith applies the HasEdge predicate on the "drugs" edge with a given conditions (other predicates).
func HasDrugsWith(preds ...predicate.Drug) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DrugsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DrugsTable, DrugsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Unit) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Unit) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Unit) predicate.Unit {
	return predicate.Unit(func(s *sql.Selector) {
		p(s.Not())
	})
}
