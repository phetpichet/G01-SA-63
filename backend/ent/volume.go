// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Piichet-3-/app/ent/volume"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Volume is the model entity for the Volume schema.
type Volume struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VolumeType holds the value of the "VolumeType" field.
	VolumeType string `json:"VolumeType,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VolumeQuery when eager-loading is set.
	Edges VolumeEdges `json:"edges"`
}

// VolumeEdges holds the relations/edges for other nodes in the graph.
type VolumeEdges struct {
	// Drugs holds the value of the drugs edge.
	Drugs []*Drug
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DrugsOrErr returns the Drugs value or an error if the edge
// was not loaded in eager-loading.
func (e VolumeEdges) DrugsOrErr() ([]*Drug, error) {
	if e.loadedTypes[0] {
		return e.Drugs, nil
	}
	return nil, &NotLoadedError{edge: "drugs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Volume) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // VolumeType
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Volume fields.
func (v *Volume) assignValues(values ...interface{}) error {
	if m, n := len(values), len(volume.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	v.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field VolumeType", values[0])
	} else if value.Valid {
		v.VolumeType = value.String
	}
	return nil
}

// QueryDrugs queries the drugs edge of the Volume.
func (v *Volume) QueryDrugs() *DrugQuery {
	return (&VolumeClient{config: v.config}).QueryDrugs(v)
}

// Update returns a builder for updating this Volume.
// Note that, you need to call Volume.Unwrap() before calling this method, if this Volume
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Volume) Update() *VolumeUpdateOne {
	return (&VolumeClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (v *Volume) Unwrap() *Volume {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Volume is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Volume) String() string {
	var builder strings.Builder
	builder.WriteString("Volume(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", VolumeType=")
	builder.WriteString(v.VolumeType)
	builder.WriteByte(')')
	return builder.String()
}

// Volumes is a parsable slice of Volume.
type Volumes []*Volume

func (v Volumes) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
