// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/Piichet-3-/app/ent/drug"
	"github.com/Piichet-3-/app/ent/predicate"
	"github.com/Piichet-3-/app/ent/volume"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// VolumeUpdate is the builder for updating Volume entities.
type VolumeUpdate struct {
	config
	hooks      []Hook
	mutation   *VolumeMutation
	predicates []predicate.Volume
}

// Where adds a new predicate for the builder.
func (vu *VolumeUpdate) Where(ps ...predicate.Volume) *VolumeUpdate {
	vu.predicates = append(vu.predicates, ps...)
	return vu
}

// SetVolumeType sets the VolumeType field.
func (vu *VolumeUpdate) SetVolumeType(s string) *VolumeUpdate {
	vu.mutation.SetVolumeType(s)
	return vu
}

// AddDrugIDs adds the drugs edge to Drug by ids.
func (vu *VolumeUpdate) AddDrugIDs(ids ...int) *VolumeUpdate {
	vu.mutation.AddDrugIDs(ids...)
	return vu
}

// AddDrugs adds the drugs edges to Drug.
func (vu *VolumeUpdate) AddDrugs(d ...*Drug) *VolumeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return vu.AddDrugIDs(ids...)
}

// Mutation returns the VolumeMutation object of the builder.
func (vu *VolumeUpdate) Mutation() *VolumeMutation {
	return vu.mutation
}

// RemoveDrugIDs removes the drugs edge to Drug by ids.
func (vu *VolumeUpdate) RemoveDrugIDs(ids ...int) *VolumeUpdate {
	vu.mutation.RemoveDrugIDs(ids...)
	return vu
}

// RemoveDrugs removes drugs edges to Drug.
func (vu *VolumeUpdate) RemoveDrugs(d ...*Drug) *VolumeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return vu.RemoveDrugIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (vu *VolumeUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := vu.mutation.VolumeType(); ok {
		if err := volume.VolumeTypeValidator(v); err != nil {
			return 0, &ValidationError{Name: "VolumeType", err: fmt.Errorf("ent: validator failed for field \"VolumeType\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VolumeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VolumeUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VolumeUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VolumeUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VolumeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   volume.Table,
			Columns: volume.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: volume.FieldID,
			},
		},
	}
	if ps := vu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.VolumeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: volume.FieldVolumeType,
		})
	}
	if nodes := vu.mutation.RemovedDrugsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   volume.DrugsTable,
			Columns: []string{volume.DrugsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.DrugsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   volume.DrugsTable,
			Columns: []string{volume.DrugsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{volume.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// VolumeUpdateOne is the builder for updating a single Volume entity.
type VolumeUpdateOne struct {
	config
	hooks    []Hook
	mutation *VolumeMutation
}

// SetVolumeType sets the VolumeType field.
func (vuo *VolumeUpdateOne) SetVolumeType(s string) *VolumeUpdateOne {
	vuo.mutation.SetVolumeType(s)
	return vuo
}

// AddDrugIDs adds the drugs edge to Drug by ids.
func (vuo *VolumeUpdateOne) AddDrugIDs(ids ...int) *VolumeUpdateOne {
	vuo.mutation.AddDrugIDs(ids...)
	return vuo
}

// AddDrugs adds the drugs edges to Drug.
func (vuo *VolumeUpdateOne) AddDrugs(d ...*Drug) *VolumeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return vuo.AddDrugIDs(ids...)
}

// Mutation returns the VolumeMutation object of the builder.
func (vuo *VolumeUpdateOne) Mutation() *VolumeMutation {
	return vuo.mutation
}

// RemoveDrugIDs removes the drugs edge to Drug by ids.
func (vuo *VolumeUpdateOne) RemoveDrugIDs(ids ...int) *VolumeUpdateOne {
	vuo.mutation.RemoveDrugIDs(ids...)
	return vuo
}

// RemoveDrugs removes drugs edges to Drug.
func (vuo *VolumeUpdateOne) RemoveDrugs(d ...*Drug) *VolumeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return vuo.RemoveDrugIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (vuo *VolumeUpdateOne) Save(ctx context.Context) (*Volume, error) {
	if v, ok := vuo.mutation.VolumeType(); ok {
		if err := volume.VolumeTypeValidator(v); err != nil {
			return nil, &ValidationError{Name: "VolumeType", err: fmt.Errorf("ent: validator failed for field \"VolumeType\": %w", err)}
		}
	}

	var (
		err  error
		node *Volume
	)
	if len(vuo.hooks) == 0 {
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VolumeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VolumeUpdateOne) SaveX(ctx context.Context) *Volume {
	v, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query on the entity.
func (vuo *VolumeUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VolumeUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VolumeUpdateOne) sqlSave(ctx context.Context) (v *Volume, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   volume.Table,
			Columns: volume.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: volume.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Volume.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := vuo.mutation.VolumeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: volume.FieldVolumeType,
		})
	}
	if nodes := vuo.mutation.RemovedDrugsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   volume.DrugsTable,
			Columns: []string{volume.DrugsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.DrugsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   volume.DrugsTable,
			Columns: []string{volume.DrugsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	v = &Volume{config: vuo.config}
	_spec.Assign = v.assignValues
	_spec.ScanValues = v.scanValues()
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{volume.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return v, nil
}
